#+TITLE: Functional Programming and the Lambda Calculus
#+AUTHOR: Ed Cole

* Overview
What is functional programming?  Why does it matter?  
[[http://en.wikipedia.org/wiki/Functional_programming][Wikipedia]] defines functional programming as "a programming paradigm that 
treats computation as the evaluation of mathematical functions and avoids 
state and mutable data."  This paradigm attempts to make the functions of computer science behave like the functions of mathematics.
** The relationship between computer programming and mathematics.
*** Variables and functions
Variables and functions behave differently in mathematics and most computer languages.  Consider the expression x = x + 1.  It is a contradiction in mathematics, but in many languages, it means to take the value that was in a location named "x" and replace it with the same value plus one.
*** What is a function?
- In mathematics, a function is a mapping from one set (the domain) to another set (the range) in such a way that any element of the domain is mapped to exactly one element of the range.
- In computers, a function is a subroutine that returns a value.
* The Lambda Calculus
The Lambda Calculus is a mathematical theory of computation that is equivalent
to Turing's model for computable functions.  It is based on the manipulation of
/lambda expressions/, which are formally defined as a combination of the 
following things (where A, B, and C are arbitrary \lambda-expressions):

 /name/ or   \lambda /name/ . A or   (\lambda x.B C)

The /name/ represents a unary function (i.e. a function with one argument) that 
has no side effects.

The second form is called abstraction; \lambda x.A binds all occurences of x 
in the (arbitrary) lambda expression A; It is equivalent to using x as the 
parameter of a function in a modern computer language.

The third form is application of \lambda-expression 1 to \lambda-expression 2;
(\lambda x.B C) has the effect of replacing all occurences of x in B with C.

** Examples
*** Example 1 -- Identity
\lambda x.x -- This is the identity operation; in Groovy, it would be `{ x -> x }`.
*** Example 2 -- Self-apply
\lambda s.(s s) -- Applies `s` to itself.  In Groovy `{ s -> s(s) }`

*** Example 3 -- Boolean true and false
\lambda first.\lambda second.first --  This takes two arguments and returns the first.  ` {first, second -> first}`.  It is significant because Church used it as `true` in deriving boolean logic from the \lambda-calculus.

\lambda first.\lambda second.second -- Return the second argument.  This is `false` in boolean logic.

*** Example 4 -- if-then-else
\lambda iftrue.\lambda iffalse.\lambda test.((test iftrue) iffalse)  -- If you apply this to a \lambda-expression 
that evaluates to `true` or `false`, it becomes the standard if-then-else construct you find in 
almost every programming language.  In this case, the test is the third argument so you can curry it with iftrue and
iffalse expressions.  Thus 

 ((\lambda iftrue.\lambda iffalse.\lambda test.((test iftrue) iffalse) x) y) =>
(\lambda iffalse.\lambda test.((test x) iffalse) y) => 
\lambda test.((test x) y)

The result is a function that you apply to a boolean condition.  

 \lambda test.((test x) y) true => x

 \lambda test.((test x) y) false => y

** Abbreviated Form

Because the lambda notation of all but the simplest expressions becomes 
difficult to read because of all the parentheses, is often abbreviated 
by combining the application of multiple arguments of an expression into a
single set of parentheses.  Thus

 \lambda a.\lambda b.\lambda c.(((f a) b) c)

becomes

 \lambda a.\lambda b.\lambda c.(f a b c)

So the if-then-else example above would look like this.

 \lambda test.\lambda iftrue.\lambda.iffalse.(test iftrue iffalse)

At this point it seems to start looking like LISP code.  This is not a coincidence.
** Optimization
- AMD64, Itanium and parallelism
- On-the-fly optimization
  - JVM
  - V8
* Functional Programming Languages
Functional programming languages are languages in which you 
can use functions as first-class objects.  That means that you can assign a 
function to a variable, pass it as a parameter, and perform certain operations
on it.  Some languages, like Haskell are strict in enforcing the restrictions
of pure functional programming, and some are much less so.

** Lisp
Lisp is an ancient and ever new language that pioneered many of the things
we take for granted in modern programming languages.  It grew out of the 
Lambda Calculus, so it has had functional programming features from the 
beginning.

*** Emacs Lisp
In Emacs and Common Lisp, you define an anonymous function with the lambda keyword. 
#+BEGIN_SRC emacs-lisp -n
;; setq defines a local variable and assigns it a value.
(setq x 1)

;; x is now a variable containing the value 1
(setq plus1 (lambda (a) "Add 1 to a" (+ a 1)))

;; plus1 is now a variable containing an anonymous function
;;     that adds 1 to its single argument
;;

;; Invoke plus1 with argment 1
(funcall plus1 1)

;; The result is 2.

;; Note that in Emacs Lisp you cannot just say (plus1 1).
#+END_SRC

#+RESULTS:
: 2

See the emacs lisp documentation on [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Lambda-Expressions.html#Lambda-Expressions][lambdas]] and [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html#Lexical-Binding][closures]].
There are Many flavors of Lisp, but I think the most
important ones are listed below.
*** Scheme
You don't have to use the funcall function in Scheme; you would 
just invoke it like any other function. 
(See [[ftp://ftp.cs.utexas.edu/pub/garbage/cs345/schintro-v14/schintro_122.html][An Introduction to Scheme and its Implementation]])

#+BEGIN_SRC scheme -n
(define x 1)
(print "x is now a variable containing the value 1")
(print x)
;; Define, but do not assign, plus1
(define plus1)
(set! plus1 (lambda (a) "Add 1 to a" (+ a 1)))
(print "plus1 is now a variable containing an anonymous function")
(print "      that adds 1 to its single argument")
(print "")
(print "Invoke plus1 with argument x")
(print (plus1 x))(define x 1)
(print "x is now a variable containing the value 1")
(print x)
;; Define, but do not assign, plus1
(define plus1)
(set! plus1 (lambda (a) "Add 1 to a" (+ a 1)))
(print "plus1 is now a variable containing an anonymous function")
(print "      that adds 1 to its single argument")
(print "")
(print "Invoke plus1 with argument x")
(print (plus1 x))
#+END_SRC
This is evaluated by the Scheme interpreter at [[http://repl.it][repl.it]]
#+BEGIN_EXAMPLE
x is now a variable containing the value 1
1
plus1 is now a variable containing an anonymous function
      that adds 1 to its single argument

Invoke plus1 with argument x
2
#+END_EXAMPLE
*** Clojure
Clojure is a Lisp implementation for the Java Virtual Machine, but it has a 
focus on concurrency.
#+BEGIN_SRC clojure
(def x 1)
(def plus1)
(def plus1 (fn [a] (+ a 1)))
(plus1 1)
#+END_SRC
http://tryclj.com/
** JavaScript
JavaScript is the first mainstream language with closures.  It is also a 
language that we can't escape working with.  
#+BEGIN_SRC javascript -n
// Define the variables
var x = 1, plus1;

plus1 = function (a) {
    return a + 1;
}

// plus1 is now a variable containing an anonymous function
//     that adds 1 to its single argument
//

// Invoke plus1 with argment 1
plus1(1);
#+END_SRC
** Groovy
#+BEGIN_SRC groovy -n
def x = 1
def plus1 = { a ->  a + 1 }
plus1(x)
#+END_SRC
** Haskell
Haskell is a strictly functional programming language.  This introduces disadvantages as well as advantages, but it was originally an academic language
** Scala
Scala is another language designed for the JVM, which introduces some functional concepts.
#+BEGIN_SRC scala
var plus1 = (x: Int) => x + 1
plus1(1)
#+END_SRC
* Functions as First-Class Objects
  Callbacks, Hooks, and Ajax
** Callbacks
** Asynchronous operations
** Hooks
** State tables
* Closures
* Combinators
* Recursion
* Lists
* Javascript
* Groovy
* Monads
  Monads are a hot topic in today's programming scene.  They are an 
  escapee from Category Theory, which is a kind of meta-mathemeatics.
** IO monad
Real-world programming requires side-effects, which is a big problem for 
strictly functional languages, like Haskell, that enforce immutability.  
They found a loophole by introducing the IO monad, which can be turned into 
a list of instructions for creating the output.
** Maybe monad
** Promises
* Notes
- [[http://marakana.com/s/post/1118/jquery_plugins][Develop your own jQuery plugin]]
- [[http://marakana.com/s/post/1127/jquery_web_page_presentation][Transform your web page into a presentation with jQuery]]
